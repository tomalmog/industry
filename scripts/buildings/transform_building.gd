# Author: Tom Almog
# File Name: transform_building.gd
# Project Name: Industry
# Creation Date: 1/3/2025
# Modified Date: 1/14/2025
# Description: abstract base building class. defines the behavior of a transform building that processes input items to generate an output item
extends Building

class_name TransformBuilding

# properties
var input_type: int  # type of item that the building can accept as input
var output_type: int  # type of item that the building produces as output
var is_generating: bool = false  # whether the building is currently generating an output item
var generating_type: int  # type of item being generated by the building

# pre: item is the item being checked, input_direction is the direction from which the item is coming
# post: returns true if the item can be accepted, false otherwise
# description: checks if the building can accept an item based on input direction and item type
func can_accept_item(item: Item, input_direction: Vector2) -> bool:
	if is_empty() && !is_generating && inputs.has(input_direction) && item.type % 10 == inputs[input_direction]:
		return true
	return false

# pre: none
# post: none
# description: processes the input item, deletes it, and starts generating a new output item
func input_item():
	# sets the output type of the next item and deletes the currently stored item
	output_type = stored_item.type
	ItemManager.delete_item(stored_item) 
	
	# reset the stored item referece and tick counter, and mark the building as generating
	stored_item = null 
	tick_counter = 0  
	is_generating = true 

# pre: none
# post: none
# description: generates an output item when the operation interval is reached
func run_tick():
	if is_empty() && is_generating && tick_counter >= operation_interval:
		# spawns the generated output item based on the output type
		var item = ItemManager.spawn_item(output_type + 1, self)
		
		# marks the building as no longer generating
		is_generating = false  
